(function() {
  var JasmineHttpServerSpy, MockServer, _, bodyParser, debug, doneRejectHandler, doneResolveHandler, express, getRequestObject, q,
    slice = [].slice;

  express = require('express');

  q = require('q');

  _ = require('lodash');

  bodyParser = require('body-parser');

  debug = require('debug')('jasmine-http-spy');

  doneResolveHandler = function(done) {
    return function(result) {
      if (typeof done === "function") {
        done();
      }
      return result;
    };
  };

  doneRejectHandler = function(done) {
    return function(err) {
      if (done != null) {
        if (typeof done.fail === "function") {
          done.fail(err);
        }
      }
      throw err;
    };
  };

  getRequestObject = function(req) {
    return _.pick(req, 'params', 'query', 'body', 'headers', 'originalUrl');
  };

  MockServer = (function() {
    function MockServer(routes1, httpSpy) {
      this.routes = routes1;
      this.httpSpy = httpSpy;
    }

    MockServer.prototype.setUpApplication = function() {
      var i, len, ref, results, route;
      this.app = express();
      this.app.use(bodyParser.json());
      this.app.use(bodyParser.urlencoded({
        extended: true
      }));
      this.app.use(function(req, res, next) {
        res.header("Access-Control-Allow-Origin", "*");
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        return next();
      });
      ref = this.routes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        route = ref[i];
        debug('Registering mock endpoint', JSON.stringify(route));
        results.push((function(_this) {
          return function(route) {
            return _this.app[route.method](route.url, function(req, res) {
              var process, requestObject, resolveRequest, responseObject;
              process = _this.httpSpy[route.handlerName];
              requestObject = getRequestObject(req);
              responseObject = process(requestObject);
              resolveRequest = function(responseObject) {
                var body, headers, statusCode;
                statusCode = responseObject.statusCode || 200;
                body = responseObject.body || {};
                headers = responseObject.headers || {};
                debug("Responding to request: " + route.method + " " + req.originalUrl);
                debug("Request: \n\t" + JSON.stringify(requestObject));
                debug("Response: \n\t" + JSON.stringify(responseObject));
                return res.status(statusCode).set(headers).send(body);
              };
              if (_.isFunction(responseObject.then)) {
                return responseObject.then(resolveRequest, function(reason) {
                  console.error("Returned promise was rejected, do nothing");
                  return console.error("Rejection reason was:", reason);
                });
              } else {
                return resolveRequest(responseObject);
              }
            });
          };
        })(this)(route));
      }
      return results;
    };

    MockServer.prototype.start = function() {
      var args, deferred, done, ref;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.setUpApplication();
      if (args.length === 2 && typeof args[0] === 'number' && typeof args[1] === 'function') {
        this.server = this.app.listen(args[0]);
        done = args[1];
      } else {
        this.server = (ref = this.app).listen.apply(ref, args);
        done = null;
      }
      deferred = q.defer();
      this.server.on('listening', deferred.resolve);
      this.server.on('error', deferred.reject);
      return deferred.promise.then(doneResolveHandler(done), doneRejectHandler(done));
    };

    MockServer.prototype.stop = function(done) {
      return q.ninvoke(this.server, 'close').then(doneResolveHandler(done), doneRejectHandler(done));
    };

    return MockServer;

  })();

  JasmineHttpServerSpy = (function() {
    var name, routes;

    routes = null;

    name = null;

    function JasmineHttpServerSpy(_name, _routes) {
      routes = _routes;
      name = _name;
      if (!routes || routes.length === 0) {
        throw new Error("Routes list should be provided");
      }
      this.setUpSpies();
      this.server = new MockServer(routes, this);
    }

    JasmineHttpServerSpy.prototype.setUpSpies = function() {
      var handlerName, handlerNames, i, len, results;
      handlerNames = _.pluck(routes, 'handlerName');
      results = [];
      for (i = 0, len = handlerNames.length; i < len; i++) {
        handlerName = handlerNames[i];
        this[handlerName] = jasmine.createSpy(name + "." + handlerName);
        results.push(this[handlerName].and.returnValue({
          statusCode: 404,
          body: {
            message: 'Page not found'
          }
        }));
      }
      return results;
    };

    return JasmineHttpServerSpy;

  })();

  module.exports = {
    createSpyObj: function(name, routes) {
      return new JasmineHttpServerSpy(name, routes);
    }
  };

}).call(this);
